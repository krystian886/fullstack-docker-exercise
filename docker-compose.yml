version: '3.7'

services:
  # Backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: backend # Use an image built from the specified dockerfile in the `backend` directory.
      dockerfile: Dockerfile
    image: backend-server:latest
    container_name: spring-boot-server
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - postgres # This service depends on postgreSQL. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: passwd     
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend_network
      - frontend_network

  # Frontend Service 
  app-client:
    build:
      context: frontend # Use an image built from the specified dockerfile in the `frontend` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
    container_name: react-client
    ports:
      - "3000:3000" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend_network

  # Database Service
  postgres:
    image: 'postgres:13.1-alpine'
    container_name: postgres-database
    restart: always
    ports:
      - '5432:5432'
    environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=passwd
    logging:
        options:
            max-size: 10m
            max-file: "3"    
    volumes:
       - db-data:/var/lib/mysql
    networks:
        - backend_network  
  
# Volumes for persisting data
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge